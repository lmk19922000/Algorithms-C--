/*
#include <iostream>
#include "stdio.h"
#include "string"
#include "sstream"
#include <math.h>
#include "set"
#include "vector"

using namespace std;

void getPermutation(set<string>&, string);

int main() {
	int total;
	string line;
	set<string> mySet;
	set<string>::iterator it;

	scanf("%d", &total);
	getline(cin, line);

	while (total--){
		getline(cin, line);

		//printf("%s", line.c_str());
		getPermutation(mySet, line);

		for (it = mySet.begin(); it != mySet.end(); it++){
			printf("%s\n", (*it).c_str());
		}
		if (total != 0){
			printf("\n");
		}

	}
	return 0;
}

void getPermutation(set<string>& mySet, string str){
	//	printf("%s\n", str.c_str());

	if (str.size() == 1){
		//printf("2 %c\n", str[0]);
		mySet.insert(str.substr(0, 1));
		return;
	}

	set<string>::iterator it;
	string tempStr;
	vector<string> vt;

	for (int i = 0; i<str.size(); i++){
		tempStr = str.substr(0, i) + str.substr(i + 1, str.size() - 1 - i);
		//printf("1 %s\n", tempStr.c_str());
		getPermutation(mySet, tempStr);

		for (it = mySet.begin(); it != mySet.end(); it++){
			if ((*it).size() != str.size() - 1){
				continue;
			}
			tempStr = str.substr(i, 1) + *it;
			//printf("3 %s\n", tempStr.c_str());
			vt.push_back(tempStr);

		}

		mySet.clear();

		for (int j = 0; j<vt.size(); j++){
			mySet.insert(vt[j]);
		}
	}
}
*/

#include <iostream>
#include "stdio.h"
#include "string"
#include "sstream"
#include <math.h>
#include "set"
#include "vector"

using namespace std;

void getAllPermutations(set<string>& allPermutations, vector<bool>& chosen, const string& allChars, string& permu);

int main() {
	int total;
	string line;
	set<string> mySet;
	set<string>::iterator it;

	scanf("%d", &total);
	getline(cin, line);


	while (total--){
		mySet.clear();
		getline(cin, line);

		vector<bool> chosen(line.size(), false);
		string permu;
		//printf("%s", line.c_str());
		getAllPermutations(mySet, chosen, line, permu);

		// Sort the set

		for (it = mySet.begin(); it != mySet.end(); it++){
			printf("%s\n", (*it).c_str());
		}
		if (total != 0){
			printf("\n");
		}

	}
	return 0;
}

void getAllPermutations(set<string>& allPermutations, vector<bool>& chosen, const string& allChars, string& permu) {
	if (permu.length() == allChars.length()) {
		allPermutations.insert(permu);
		return;
	}

	for (int i = 0; i < chosen.size(); ++i) {
		if (!chosen[i]) {
			permu.push_back(allChars[i]);
			chosen[i] = true;
			getAllPermutations(allPermutations, chosen, allChars, permu);

			// Backtrack
			chosen[i] = false;
			permu.pop_back();
		}
	}
}